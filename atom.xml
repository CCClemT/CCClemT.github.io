<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CCClemT&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-26T16:47:13.498Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CCClem_T</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP头注入</title>
    <link href="http://example.com/2023/06/27/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2023/06/27/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/</id>
    <published>2023-06-26T16:45:05.000Z</published>
    <updated>2023-06-26T16:47:13.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>针对HTTP的请求头，如果不加以过滤或者转义，在直接与数据库交互的过程中容易被利用进行SQL注入攻击，即HTTP头注入。</p><blockquote><p>常见场景：访问Web Server时，Web Server会从HTTP Header中取出浏览器信息、IP地址、HOST信息等存储到数据库中。</p></blockquote><h2 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h2><p class='item-img' data-src='/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626105842381.png'><img src="/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626105842381.png" alt="image-20230626105842381"></p><ul><li>前提观察:无任何输入点，回显有访问时间，IP地址，以及User-Agent。</li></ul><p>使用BP抓包拦截。</p><p class='item-img' data-src='/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111306953.png'><img src="/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111306953.png" alt="image-20230626111306953">尝试修改User-Agent观察是否有修改，</p><p class='item-img' data-src='/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111531078.png'><img src="/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111531078.png" alt="image-20230626111531078"></p><p>发现回显修改了，推测服务器直接从User-Agent取值然后存入数据库中，尝试判断是否存在注入点。</p><p class='item-img' data-src='/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111745121.png'><img src="/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230626111745121.png" alt="image-20230626111745121"></p><p>通过单引号闭合’发现报错。</p><p>现在查看一下后端代码：</p><blockquote><p>贴出关键代码段</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">$ip_address = $_SERVER[&quot;REMOTE_ADDR&quot;];<br>$user_agent = $_SERVER[&quot;HTTP_USER_AGENT&quot;];<br><br>// Writes the entry into the database<br>$sql = &quot;INSERT INTO visitors (date, user_agent, ip_address) VALUES (now(), &#x27;&quot; . sqli($user_agent) . &quot;&#x27;, &#x27;&quot; . $ip_address . &quot;&#x27;)&quot;;<br><br>$recordset = $link-&gt;query($sql);<br><br>if(!$recordset)<br>&#123;<br><br>    die(&quot;Error: &quot; . $link-&gt;error);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现服务器的操作是通过 INSERT INTO VALUES 语句ip_address 和 user-agent 插入数据库中且第一个参数为user-agent，第二个为ip_address。</p><p>由此我们开始构造注入语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">hack&#x27;,(selectdatabase()));#<br></code></pre></td></tr></table></figure><p class='item-img' data-src='/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230627002653519.png'><img src="/../images/HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20230627002653519.png" alt="image-20230627002653519"></p><p>成功注入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP头注入&quot;&gt;&lt;a href=&quot;#HTTP头注入&quot; class=&quot;headerlink&quot; title=&quot;HTTP头注入&quot;&gt;&lt;/a&gt;HTTP头注入&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定</summary>
      
    
    
    
    <category term="CTF-WEB" scheme="http://example.com/categories/CTF-WEB/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>判断sql注入点</title>
    <link href="http://example.com/2023/05/13/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/"/>
    <id>http://example.com/2023/05/13/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/</id>
    <published>2023-05-12T16:25:13.000Z</published>
    <updated>2023-05-13T03:18:33.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h1><h2 id="判断关键"><a href="#判断关键" class="headerlink" title="判断关键"></a>判断关键</h2><ul><li>判断该访问目标URL是否存在SQL注入?</li><li>如果存在SQL注入，那么属于哪种SQL注入?</li></ul><blockquote><p>只要是带有参数的动态网页且此网页访问了数据库，那么就有可能存在SQL注入</p></blockquote><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><ul><li>单引号判断法</li></ul><p>​如果页面返回错误，则存在SQL注入。</p><p>​原因是无论字符型还是整型都会因为单引号个数不匹配而报错。</p><h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2><p>通常SQL注入分为两种:数字型、字符型</p><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230510234533782.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230510234533782.png" alt="image-20230510234533782"></p><blockquote><p>本节中测试均以该表为原型</p></blockquote><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>通常语句类型为<code>select * from &lt;表名&gt; where id = x</code></p><p>通常构造 <code>and 1=1</code>以及<code>and 1=2</code>来判断</p><ul><li>测试</li></ul><p>​1. <code>select * from test where id=1 and 1=1;</code></p><p>​<img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512205948976.png" alt="image-20230512205948976"></p><p>​2. <code>select * from test where id=1 and 1=2;</code></p><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512210149298.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512210149298.png" alt="image-20230512210149298"></p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>通常语句类型为<code>select * from &lt;表名&gt; where id = &#39;x&#39;</code></p><p>通常构造<code>and &#39;1&#39;=&#39;1</code>以及<code>and &#39;1&#39;=&#39;2</code>来判断</p><ul><li>测试</li></ul><p>​1. <code>select * from test where gender = &#39;M&#39;and&#39;1&#39;=&#39;1&#39;;</code></p><p>​<img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512210402450.png" alt="image-20230512210402450"></p><p>​2. <code>select * from test where gender = &#39;M&#39;and&#39;1&#39;=&#39;2&#39;;</code></p><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512210458810.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512210458810.png" alt="image-20230512210458810"></p><hr><h2 id="靶场测试"><a href="#靶场测试" class="headerlink" title="靶场测试"></a>靶场测试</h2><blockquote><p>bWAPP靶场</p></blockquote><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512211327926.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512211327926.png" alt="image-20230512211327926"></p><p> <code>https://bwapp.exp-9.com/sqli_1.php?title=t&amp;action=search</code></p><ul><li>由URL可知注入类型为字符型；</li><li>尝试直接在搜索框进行测试:</li></ul><p>​<code>&#39;t&#39; and &#39;1&#39;=&#39;1 #</code></p><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512213900018.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512213900018.png" alt="image-20230512213900018"></p><ul><li><strong>出现错误</strong>,修改后再尝试：</li></ul><p>​<code>t%&#39; and &#39;1&#39; = &#39;1&#39; #</code></p><p class='item-img' data-src='/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512230912730.png'><img src="/../images/%E5%88%A4%E6%96%ADsql%E6%B3%A8%E5%85%A5%E7%82%B9/image-20230512230912730.png" alt="image-20230512230912730"></p><ul><li>成功了接下来探究原因。</li></ul><h3 id="探究原因"><a href="#探究原因" class="headerlink" title="探究原因"></a>探究原因</h3><p>打开对应的php文件,贴出关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;title&quot;</span>]))<br>&#123;<br><br>    <span class="hljs-variable">$title</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;title&quot;</span>];<br><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM movies WHERE title LIKE &#x27;%&quot;</span> . <span class="hljs-title function_ invoke__">sqli</span>(<span class="hljs-variable">$title</span>) . <span class="hljs-string">&quot;%&#x27;&quot;</span>;<br><br>    <span class="hljs-variable">$recordset</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$link</span>,<span class="hljs-variable">$sql</span>);<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$recordset</span>)<br>    &#123;<br><br>        <span class="hljs-comment">// die(&quot;Error: &quot; . mysql_error());</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看出，此处使用了<strong>like</strong>语法,需要闭合**’%’**并把后面不需要的内容给注释掉，综合以上得出<code>t%&#39; and &#39;1&#39; = &#39;1&#39; #</code>。</p><p>注:</p><ul><li><strong>SQL LIKE 操作符</strong></li></ul><p>LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p><ul><li><strong>SQL LIKE 语法</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">SELECT column1, column2, ...<br>FROM table_name<br>WHERE column LIKE pattern;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>**column1, column2, **：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</p></li><li><p><strong>table_name</strong>：要查询的表名称。</p></li><li><p><strong>column</strong>：要搜索的字段名称。</p></li><li><p><strong>pattern</strong>：搜索模式。</p><ul><li><p>‘%a’   &#x2F;&#x2F;以a结尾的数据</p><p>‘a%’   &#x2F;&#x2F;以a开头的数据</p><p>‘%a%’   &#x2F;&#x2F;含有a的数据</p><p>‘_a_’   &#x2F;&#x2F;三位且中间字母是a的</p><p>‘_a’   &#x2F;&#x2F;两位且结尾字母是a的</p><p>‘a_’   &#x2F;&#x2F;两位且开头字母是a的</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;判断注入点&quot;&gt;&lt;a href=&quot;#判断注入点&quot; class=&quot;headerlink&quot; title=&quot;判断注入点&quot;&gt;&lt;/a&gt;判断注入点&lt;/h1&gt;&lt;h2 id=&quot;判断关键&quot;&gt;&lt;a href=&quot;#判断关键&quot; class=&quot;headerlink&quot; title=&quot;判断关键&quot;</summary>
      
    
    
    
    <category term="CTF-WEB" scheme="http://example.com/categories/CTF-WEB/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
